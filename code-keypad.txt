/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include "stm32f405xx.h"
#include "lcd.h"

const char keymap[4][4] = {
	    {'1', '2', '3', 'A'},
	    {'4', '5', '6', 'B'},
	    {'7', '8', '9', 'C'},
	    {'*', '0', '#', 'D'}
	};

void delayms(uint32_t dly)
{
  uint32_t i,j=0;
  for(i=0;i<dly;i++)
  for(j=0;j<16000;j++);
}

void gpio_keypad_init (void){
	RCC->AHB1ENR |= (1 << 2); // port c

	//set rows as output PC0-PC3
	GPIOC->MODER |=  (0x1 <<0);
	GPIOC->MODER |=  (0x1 <<2);
	GPIOC->MODER |=  (0x1 <<4);
	GPIOC->MODER |=  (0x1 <<6);

	//set columns to input PC4-PC7
	GPIOC->MODER &=  ~(0x0 <<8);
	GPIOC->MODER &=  ~(0x0 <<10);
	GPIOC->MODER &=  ~(0x0 <<12);
	GPIOC->MODER &=  ~(0x0 <<14);



	    // Enable pull-up resistors for PC4â€“PC7
	   GPIOC->PUPDR &= ~(0xFF << 8);     // Clear
	    GPIOC->PUPDR |=  (0x55 << 8);     // Pull-up (01)
}




char scan_keypad(void) {
    for (int row = 0; row < 4; row++) {
        GPIOC->ODR |= 0x0F;              // Set all rows HIGH
        GPIOC->ODR &= ~(1 << row);       // Pull current row LOW

        for (volatile int d = 0; d < 1000; d++); // short delay

        for (int col = 0; col < 4; col++) {
            if ((GPIOC->IDR & (1 << (col + 4))) == 0) {
                return keymap[row][col]; // Return mapped key
            }
        }
    }
    return 0; // No key pressed
}



int main(void)
{
    LcdInit();
    gpio_keypad_init();

    char passkey[5] = {0};
    const char password[] = "127C";

    LcdFxn(0, 0x01); // Clear screen
    lprint(0x80, "Welcome");

    while (1) {
        char key = scan_keypad();
        if (key == '*') {
            LcdFxn(0, 0x01); // Clear LCD
            lprint(0x80, "Enter Passkey:");
            memset(passkey, 0, sizeof(passkey));
            int i = 0;

            while (1) {
                key = scan_keypad();
                if (key) {
                    if (key == '#') {
                        passkey[i] = '\0'; // Null-terminate before checking
                        LcdFxn(0, 0x01);   // Clear LCD

                        if (strcmp(passkey, password) == 0) {
                            lprint(0x80, "Please come in");
                        } else {
                            lprint(0x80, "Wrong");
                        }

                        delayms(1000); // Show result for 1 second
                        LcdFxn(0, 0x01);
                        lprint(0x80, "Welcome");
                        break;  // Exit password entry
                    }

                    if (i < 4) {
                        passkey[i++] = key;
                        lprint(0xC0 + i - 1, "*");
                    }
                    while (scan_keypad()); // Wait for key release
                    delayms(100);
                }
            }
        }
    }
}
