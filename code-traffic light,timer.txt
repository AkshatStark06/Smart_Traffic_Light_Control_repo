#include "stm32f405xx.h"

// Delay for 1 ms (approx)
void delayms(uint32_t ms) {
	for (uint32_t i = 0; i < ms * 16000; i++);
}

// TM1637 bit delay
void TM1637_delay() {
	for (volatile int i = 0; i < 100; i++);
}

// Enable GPIOA and GPIOB, and configure pins
void gpio_init(void) {
	RCC->AHB1ENR |= (1 << 0); // Enable GPIOA
	RCC->AHB1ENR |= (1 << 1); // Enable GPIOB

	// Traffic LEDs on GPIOA: PA0, PA1, PA2, PA4, PA5, PA6
	GPIOA->MODER &= ~((3 << 0) | (3 << 2) | (3 << 4) | (3 << 8) | (3 << 10) | (3 << 12));
	GPIOA->MODER |=  ((1 << 0) | (1 << 2) | (1 << 4) | (1 << 8) | (1 << 10) | (1 << 12));

	// TM1637 1: PB6 = DIO, PB7 = CLK
	// TM1637 2: PB4 = DIO, PB5 = CLK
	GPIOB->MODER &= ~((3 << 12) | (3 << 14) | (3 << 8) | (3 << 10));
	GPIOB->MODER |=  ((1 << 12) | (1 << 14) | (1 << 8) | (1 << 10));
}

// Segment lookup table
uint8_t segment_digit[10] = { 0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F };

// TM1637 abstraction using dio_pin and clk_pin
void set_pin(int pin, int value) {
	if (value)
		GPIOB->ODR |= (1 << pin);
	else
		GPIOB->ODR &= ~(1 << pin);
}

void TM1637_start(int dio_pin, int clk_pin) {
	set_pin(clk_pin, 1);
	set_pin(dio_pin, 1);
	TM1637_delay();
	set_pin(dio_pin, 0);
	TM1637_delay();
}

void TM1637_stop(int dio_pin, int clk_pin) {
	set_pin(clk_pin, 0);
	TM1637_delay();
	set_pin(dio_pin, 0);
	TM1637_delay();
	set_pin(clk_pin, 1);
	TM1637_delay();
	set_pin(dio_pin, 1);
	TM1637_delay();
}

void TM1637_write_byte(int dio_pin, int clk_pin, uint8_t b) {
	for (int i = 0; i < 8; i++) {
		set_pin(clk_pin, 0);
		set_pin(dio_pin, b & 0x01);
		TM1637_delay();
		set_pin(clk_pin, 1);
		TM1637_delay();
		b >>= 1;
	}
	// Skip ACK
	set_pin(clk_pin, 0);
	TM1637_delay();
	set_pin(clk_pin, 1);
	TM1637_delay();
	set_pin(clk_pin, 0);
	TM1637_delay();
}

void TM1637_display_digit(int dio_pin, int clk_pin, int pos, int digit) {
	TM1637_start(dio_pin, clk_pin);
	TM1637_write_byte(dio_pin, clk_pin, 0x44); // Command 1: set data
	TM1637_stop(dio_pin, clk_pin);

	TM1637_start(dio_pin, clk_pin);
	TM1637_write_byte(dio_pin, clk_pin, 0xC0 | pos); // Command 2: set address
	TM1637_write_byte(dio_pin, clk_pin, segment_digit[digit]);
	TM1637_stop(dio_pin, clk_pin);

	TM1637_start(dio_pin, clk_pin);
	TM1637_write_byte(dio_pin, clk_pin, 0x88); // Command 3: control display
	TM1637_stop(dio_pin, clk_pin);
}

// Timer delay using TIM3
void TIM3_init(void) {
	RCC->APB1ENR |= (1 << 1); // Enable TIM3
	TIM3->PSC = 16000 - 1;    // 1ms tick
	TIM3->ARR = 1000 - 1;     // 1s delay
	TIM3->CNT = 0;
	TIM3->SR = 0;
}

void delay_1s(void) {
	TIM3->CNT = 0;
	TIM3->SR &= ~1;
	TIM3->CR1 |= 1;

	while (!(TIM3->SR & 1));
	TIM3->SR &= ~1;
	TIM3->CR1 &= ~1;
}


void red_show_countdown(int seconds) {
	for (int i = seconds; i > 0; i--) {
		TM1637_display_digit(6,7,0, i / 10); // Tens
		TM1637_display_digit(6,7,1, i % 10); // Units
		TM1637_display_digit(6,7,2, 0);
		TM1637_display_digit(6,7,3, 0);

		TM1637_display_digit(4,5,0, i / 10); // Tens
		TM1637_display_digit(4,5,1, i % 10); // Units
		TM1637_display_digit(4,5,2, 0);
		TM1637_display_digit(4,5,3, 0);

		delay_1s();
	}
}

// Unified countdown display on both TM1637 modules and LEDs
void show_countdown(
	int red_seconds, int green_seconds, int yellow_seconds,
	int red_pin_side1, int yellow_pin_side1, int green_pin_side1,
	int red_pin_side2, int yellow_pin_side2, int green_pin_side2,
	int dio1, int clk1, int dio2, int clk2,int show_red_on_display1)
{
	for (int i = 0; i < red_seconds; i++) {
		int rem = green_seconds + yellow_seconds - i;
		int red_rem = red_seconds - i;

		// Side 1 RED display
		if (show_red_on_display1) {
			TM1637_display_digit(dio1, clk1, 0, red_rem / 10);
			TM1637_display_digit(dio1, clk1, 1, red_rem % 10);
			TM1637_display_digit(dio1, clk1, 2, 0);
			TM1637_display_digit(dio1, clk1, 3, 0);
		} else {
			TM1637_display_digit(dio2, clk2, 0, red_rem / 10);
			TM1637_display_digit(dio2, clk2, 1, red_rem % 10);
			TM1637_display_digit(dio2, clk2, 2, 0);
			TM1637_display_digit(dio2, clk2, 3, 0);
		}

		// Clear all LEDs
		GPIOA->ODR &= ~((1 << red_pin_side1) | (1 << yellow_pin_side1) | (1 << green_pin_side1) |
		                (1 << red_pin_side2) | (1 << yellow_pin_side2) | (1 << green_pin_side2));

		// Turn on RED for side 1
		GPIOA->ODR |= (1 << red_pin_side1);

		// Side 2: show GREEN or YELLOW countdown
		if (rem > yellow_seconds) {
			int g_rem = rem - yellow_seconds;
			TM1637_display_digit(dio2, clk2, 0, g_rem / 10);
			TM1637_display_digit(dio2, clk2, 1, g_rem % 10);
			GPIOA->ODR |= (1 << green_pin_side2);
		} else if (rem > 0) {
			TM1637_display_digit(dio2, clk2, 0, rem / 10);
			TM1637_display_digit(dio2, clk2, 1, rem % 10);
			GPIOA->ODR |= (1 << yellow_pin_side2);
		} else {
			TM1637_display_digit(dio2, clk2, 0, 0);
			TM1637_display_digit(dio2, clk2, 1, 0);
		}

		TM1637_display_digit(dio2, clk2, 2, 0);
		TM1637_display_digit(dio2, clk2, 3, 0);

		delay_1s();
	}

	GPIOA->ODR &= ~((1 << red_pin_side1) | (1 << yellow_pin_side1) | (1 << green_pin_side1) |
	                (1 << red_pin_side2) | (1 << yellow_pin_side2) | (1 << green_pin_side2));
}

int main(void) {
	gpio_init();
	TIM3_init();

	GPIOA->ODR = 0;
	GPIOA->ODR |= (1 << 2) | (1 << 5); // Initial RED LEDs
	red_show_countdown(10);
	GPIOA->ODR = 0;

	while (1) {
		// TM1: PB6 -58 (DIO), PB7-59 (CLK)
		// TM2: PB4 -56(DIO), PB5-57 (CLK)

		// Phase 1: Side 1 RED (PA0), Side 2 GREEN (PA6) → YELLOW (PA5)
		show_countdown(20, 12, 8, 0, 1, 2, 4, 5, 6, 6, 7, 4, 5, 1);

		// Phase 2: Side 2 RED (PA4), Side 1 GREEN (PA2) → YELLOW (PA1)
		show_countdown(20, 12, 8, 4, 5, 6, 0, 1, 2, 4, 5, 6, 7, 1);

	}
}
